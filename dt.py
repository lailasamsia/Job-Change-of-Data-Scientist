# -*- coding: utf-8 -*-
"""Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t0sVsHHAEywrNgeTYVhtu0qwY3Jdu9bl

# Import Library
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing

"""# Load File"""
df = pd.read_csv('aug_train.csv')

"""# Preprocessing

## Handling Variable
"""
df = df.drop(columns=['city'], axis=1)
df

df['company_size'].value_counts()


"""## Handling Missing Value"""

lis = []
for col in df.columns:
    lis.append([col, df[col].dtype, sum(df[col].isnull()), 100*(sum(df[col].isnull())/len(df[col])), 
                df[col].nunique()])
miss_val=pd.DataFrame(lis, columns=['Name', 'Type', 'jml Null', '% Null', 'Unique'])
miss_val.to_excel('missval.xlsx', index=False)
miss_val
#files.download('missval.xlsx')

for col in df:
    if df[col].isnull().any():
        df[col] = df[col].fillna(df[col].mode()[0])

df.isnull().sum()


"""# Feature Engineering"""

df= df.replace({'relevent_experience': {'Has relevent experience': 1, 'No relevent experience': 0}})
df

nominal = ['gender','enrolled_university', 'education_level', 'major_discipline', 'experience',
           'company_size', 'company_type', 'last_new_job']
from sklearn.preprocessing import OneHotEncoder
ohe=OneHotEncoder(drop='first')
hasil_ohe=ohe.fit(df[nominal])
df[hasil_ohe.get_feature_names(nominal)] = hasil_ohe.transform(df[nominal]).toarray()
df[hasil_ohe.get_feature_names(nominal)] = df[hasil_ohe.get_feature_names(nominal)].astype('int64')
 
import joblib
joblib.dump(hasil_ohe,"ohe.joblib")

df.drop(columns=nominal, inplace=True)
df

"""# Feature Scaling"""

df2=df

num_col = ['city_development_index', 'training_hours']
ss = preprocessing.StandardScaler()
df2[num_col]=ss.fit_transform(df2[num_col])

df2

df2['target'].value_counts()

from imblearn.over_sampling import SMOTE

os = SMOTE(sampling_strategy='minority',random_state = 123,k_neighbors=5)
x = df2.drop(columns=['enrollee_id', 'target'], axis=1)
y = df2['target']
smote_x, smote_y = os.fit_resample(x,y)
smote_x = pd.DataFrame(smote_x,columns=x.columns)
smote_y = pd.DataFrame(smote_y)

smote_x

smote_y

"""# Data Partition"""

from sklearn.model_selection import train_test_split
train_X, test_X, train_Y, test_Y = train_test_split(smote_x, smote_y, test_size=0.2,
                                                                           random_state=111)

train_X

"""# Modeling


"""## Random Forest



from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(criterion='entropy', max_features='log2',
                       n_estimators=1000, random_state=123)
rfc.fit(train_X, train_Y)

pred_rfc = rfc.predict(test_X)



import pickle
pickle_out = open('classifier.pkl', mode ='wb')
pickle.dump(rfc, pickle_out)
pickle_out.close()